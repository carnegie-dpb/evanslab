package edu.carnegiescience.dpb.evanslab;

import java.io.BufferedReader;
import java.io.FileReader;

import java.util.List;
import java.util.LinkedList;
import java.util.Map;
import java.util.HashMap;

import htsjdk.variant.variantcontext.Allele;
import htsjdk.variant.variantcontext.VariantContext;
import htsjdk.samtools.util.CloseableIterator;

import org.apache.commons.cli.CommandLine;
import org.apache.commons.cli.CommandLineParser;
import org.apache.commons.cli.DefaultParser;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.Options;
import org.apache.commons.cli.ParseException;

/**
 * Retrieves read counts from a VCF file at locations given by an input text file which contains a column of genes associated with those locations;
 * then totals the counts for all locations within a given gene and outputs that gene's totals.
 *
 * The tab-delimited locations file is of the format generated by SNPComparer, with a number of fields that aren't used here:
 * SrcContig SrcPos SrcRef SrcAlt SrcRF SrcRR SrcAF SrcAR SrcRefFrac GeneID
 * This routine only uses SrcContig, SrcPos and GeneID.
 *
 * Arguments:
 *   -v VCF-file
 *   -l SNP-locations-file (generated by SNPComparer)
 *   -a min-alt-depth [4]
 *
 * @author Sam Hokin
 */
public class SNPReadCounter {

    static int MIN_ALT_READS = 4;

    /**
     * Main class does all the work.
     */
    public static void main(String[] args) throws Exception {

        Options options = new Options();
        
        Option locFileOption = new Option("l", "locFile", true, "SNP locations file (generated by SNPComparer)");
        locFileOption.setRequired(true);
        options.addOption(locFileOption);

        Option vcfFileOption = new Option("v", "vcfFile", true, "VCF file");
        vcfFileOption.setRequired(true);
        options.addOption(vcfFileOption);

        Option altMinOption = new Option("a", "altMin", true, "minimum ALT depth for SNP to be counted");
        altMinOption.setRequired(true);
        options.addOption(altMinOption);

        CommandLineParser parser = new DefaultParser();
        HelpFormatter formatter = new HelpFormatter();
        CommandLine cmd;
        try {
            cmd = parser.parse(options, args);
        } catch (ParseException e) {
            System.out.println(e.getMessage());
            formatter.printHelp("SNPReadCounter", options);
            System.exit(1);
            return;
        }

        // filenames
        String locFilename = cmd.getOptionValue("locFile");
        String vcfFilename = cmd.getOptionValue("vcfFile");

        // parameters
        int altMin = Integer.parseInt(cmd.getOptionValue("altMin"));

        // load the VCF file
        VCFLoader vcfLoader = new VCFLoader(vcfFilename);
        vcfLoader.load();

        // run through the locations file, loading into gene-keyed maps as we go
        List<String> geneList = new LinkedList<>();
        Map<String,Integer> countMap = new HashMap<>();
        Map<String,String> seqMap = new HashMap<>();
        Map<String,Integer> startMap = new HashMap<>();
        Map<String,Integer> endMap = new HashMap<>();
        Map<String,Integer> refForwardMap = new HashMap<>();
        Map<String,Integer> refReverseMap = new HashMap<>();
        Map<String,Integer> altForwardMap = new HashMap<>();
        Map<String,Integer> altReverseMap = new HashMap<>();

        // locations file format (tab-delimited):
        // SrcContig SrcPos SrcRef SrcAlt SrcRF SrcRR SrcAF SrcAR SrcRefFrac GeneID
        String line;
        BufferedReader reader = new BufferedReader(new FileReader(locFilename));
        // skip the header
        reader.readLine();
        while ((line=reader.readLine())!=null) {
            String[] parts = line.split("\t");
            String seq = parts[0];
            int pos = Integer.parseInt(parts[1]);
            String gene = parts[9];
            if (!geneList.contains(gene)) {
                // initialize a new gene in the lists and maps
                geneList.add(gene);
                seqMap.put(gene, seq);
                countMap.put(gene, 0);
                refForwardMap.put(gene, 0);
                refReverseMap.put(gene, 0);
                altForwardMap.put(gene, 0);
                altReverseMap.put(gene, 0);
            }
            CloseableIterator<VariantContext> iterator = vcfLoader.query(seq, pos, pos);
            while (iterator.hasNext()) {
                VariantContext vc = iterator.next();
                // read depths
                List<Integer> dp4List = vc.getAttributeAsIntList("DP4", 0);
                int rF = dp4List.get(0);
                int rR = dp4List.get(1);
                int aF = dp4List.get(2);
                int aR = dp4List.get(3);
                // include if enough ALT counts
                if (aF+aR>=altMin) {
                    if (!startMap.containsKey(gene)) startMap.put(gene, vc.getStart());
                    endMap.put(gene, vc.getEnd());
                    // increment
                    int refForward = refForwardMap.get(gene) + rF;
                    int refReverse = refReverseMap.get(gene) + rR;
                    int altForward = altForwardMap.get(gene) + aF;
                    int altReverse = altReverseMap.get(gene) + aR;
                    // store
                    int count = countMap.get(gene);
                    countMap.put(gene, (count+1));
                    refForwardMap.put(gene, refForward);
                    refReverseMap.put(gene, refReverse);
                    altForwardMap.put(gene, altForward);
                    altReverseMap.put(gene, altReverse);
                }
            }
        }
        
        // dump the results
        System.out.println("edu.carnegiescience.dpb.evanslab.SNPReadCounter");
        System.out.println("locFilename:"+locFilename);
        System.out.println("vcfFilename:"+vcfFilename);
        System.out.println();
        System.out.println("Contig\tStart\tEnd\tCount\tRF\tRR\tAF\tAR\tGeneID");
        for (String gene : geneList) {
            if (startMap.containsKey(gene)) {
                int count = countMap.get(gene);
                String seq = seqMap.get(gene);
                int start = startMap.get(gene);
                int end = endMap.get(gene);
                int refForward = refForwardMap.get(gene);
                int refReverse = refReverseMap.get(gene);
                int altForward = altForwardMap.get(gene);
                int altReverse = altReverseMap.get(gene);
                System.out.println(seq+"\t"+start+"\t"+end+"\t"+count+"\t"+refForward+"\t"+refReverse+"\t"+altForward+"\t"+altReverse+"\t"+gene);
            }
        }
        
    }

}
